AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation Template to create a VPC with two public subnets, two private subnets, an Internet Gateway, a NAT Gateway, a DynamoDB VPC Endpoint, Frontend and Backend Application Load Balancers, and Auto Scaling Groups.'
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: InterviewPrepVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: InterviewPrepIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: PublicSubnet2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: PublicSubnet3

  PublicSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: PublicSubnet4

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet4
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: PrivateSubnet2

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: MyNatGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable


  FrontendALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP from anywhere to Frontend ALB"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: FrontendALBSecurityGroup

  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH & HTTP"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        sourceSecurityGroupId: !Ref FrontendALBSecurityGroup
      Tags:
      - Key: Name
        Value: FrontendSecurityGroup

  FrontendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: [ BackendALB ]
    Properties:
      LaunchTemplateName: FrontendLaunchTemplate
      VersionDescription: "Version 1"
      LaunchTemplateData:
        ImageId: ami-0953476d60561c955
        InstanceType: t2.micro
        KeyName: dev
        SecurityGroupIds:
        - !Ref FrontendSecurityGroup
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: FrontendInstance
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            exec > /var/log/user-data.log 2>&1
            echo "Updating packages..."
            sudo yum update -y
            echo "Installing Docker..."
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user
            echo "Installing Git..."
            sudo yum install -y git
            echo "Current directory before cloning: $(/bin/pwd)"
            cd /home/ec2-user
            echo "Cloning repository..."
            git clone https://github.com/devpatel43543/Language_learner.git || { echo "Git clone failed"; exit 1; }
            echo "Listing directory contents after clone..."
            ls -la /home/ec2-user
            echo "Navigating to frontend directory..."
            cd /home/ec2-user/interviewPrep/frontend
            echo "Building Docker image with backend and API Gateway URLs..."
            docker build \
              --build-arg VITE_BACKEND_BASE_URL=http://${BackendALB.DNSName} \
              -t devkumar640/frontend_interviewprep .
            echo "Running Docker container..."
            docker run -d -p 80:80 --name frontend devkumar640/frontend_interviewprep
            echo "Setup completed successfully."

  FrontendALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: frontend-ALB
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
      - !Ref FrontendALBSecurityGroup
      Tags:
      - Key: Name
        Value: frontend-ALB

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: frontend-TG
      VpcId: !Ref MyVPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 3
      Tags:
      - Key: Name
        Value: FrontendTargetGroup

  FrontendALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref FrontendALB
      Protocol: HTTP
      Port: 80
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref FrontendTargetGroup

  FrontendASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - FrontendLaunchTemplate
    Properties:
      AutoScalingGroupName: frontend-asg
      VPCZoneIdentifier:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: !GetAtt FrontendLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 500
      TargetGroupARNs:
      - !Ref FrontendTargetGroup
      Tags:
      - Key: Name
        Value: frontend-asg
        PropagateAtLaunch: true

  BackendALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP from Frontend Instances"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: BackendALBSecurityGroup

  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP from Frontend ALB"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        SourceSecurityGroupId: !Ref BackendALBSecurityGroup
      Tags:
      - Key: Name
        Value: BackendSecurityGroup
  BackendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: BackendLaunchTemplate
      VersionDescription: "Version 1"
      LaunchTemplateData:
        ImageId: ami-0953476d60561c955
        InstanceType: m5.large
        KeyName: dev
        SecurityGroupIds:
        - !Ref BackendSecurityGroup
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: BackendInstance
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            #!/bin/bash
            yum update -y

            # Docker setup
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user

            # Pull and run Ollama
            sudo docker pull ollama/ollama:latest
            CONTAINER_ID=$(sudo docker run -d -p 11434:11434 ollama/ollama:latest)

            # Wait for container to start
            sleep 10

            # Pull llama model
            sudo docker exec $CONTAINER_ID ollama pull llama3.2.1b

            # Install Python
            yum install -y python3 python3-pip

            # Create app.py with CORS middleware
            cat > /home/ec2-user/app.py << 'EOL'
            from fastapi import FastAPI, HTTPException
            from fastapi.middleware.cors import CORSMiddleware
            from pydantic import BaseModel
            import requests
            import re
            import logging

            # Configure logging
            logging.basicConfig(
                level=logging.DEBUG,
                format="%(asctime)s - %(levelname)s - %(message)s"
            )
            logger = logging.getLogger(__name__)

            app = FastAPI()

            # Add CORS middleware
            app.add_middleware(
                CORSMiddleware,
                allow_origins=["*"],  # Allow your frontend origin
                allow_credentials=True,
                allow_methods=["POST", "GET", "OPTIONS"],  # Allow necessary methods
                allow_headers=["Content-Type"],  # Allow necessary headers
            )

            OLLAMA_URL = "http://localhost:11434/api/generate"
            MODEL_NAME = "llama3.2"

            class TranslationInput(BaseModel):
                english_word: str
                target_language: str

            @app.post("/translate")
            def translate_word(data: TranslationInput):
                logger.info("Received request to translate word.")
                logger.debug(f"English Word: {data.english_word}")
                logger.debug(f"Target Language: {data.target_language}")

                prompt = f"""
            You are a language learning assistant. For the English word provided, you need to:
            1. Translate the word into the specified target language
            2. Provide the meaning/definition of the English word
            3. Create 3 practical example sentences using the English word

            Respond strictly in this format:
            Translation: <translated word>
            Meaning: <definition of the English word in simple terms>
            Example1: <sentence using the English word>
            Example2: <sentence using the English word>
            Example3: <sentence using the English word>

            ---
            English Word: {data.english_word}
            Target Language: {data.target_language}
            """

                try:
                    logger.info("Sending request to Ollama...")
                    response = requests.post(
                        OLLAMA_URL,
                        headers={"Content-Type": "application/json"},
                        json={
                            "model": MODEL_NAME,
                            "prompt": prompt,
                            "stream": False
                        },
                        timeout=300
                    )
                    response.raise_for_status()
                    logger.info("Received response from Ollama.")

                except Exception as e:
                    logger.error(f"Error contacting Ollama API: {e}")
                    raise HTTPException(status_code=500, detail=f"Error contacting Ollama API: {e}")

                result = response.json()
                logger.debug(f"Raw response from Ollama: {result}")

                text = result.get("response", "").strip()
                logger.debug(f"Parsed text: {text}")

                # Parse the response using regex
                translation_match = re.search(r"Translation:\s*(.+)", text, re.IGNORECASE)
                meaning_match = re.search(r"Meaning:\s*(.+)", text, re.IGNORECASE)
                example1_match = re.search(r"Example1:\s*(.+)", text, re.IGNORECASE)
                example2_match = re.search(r"Example2:\s*(.+)", text, re.IGNORECASE)
                example3_match = re.search(r"Example3:\s*(.+)", text, re.IGNORECASE)

                # Extract values with fallbacks
                translation = translation_match.group(1).strip() if translation_match else "Translation not available"
                meaning = meaning_match.group(1).strip() if meaning_match else "Meaning not available"
                example1 = example1_match.group(1).strip() if example1_match else "Example not available"
                example2 = example2_match.group(1).strip() if example2_match else "Example not available"
                example3 = example3_match.group(1).strip() if example3_match else "Example not available"

                logger.info(f"Final Parsed Results — Translation: {translation}, Meaning: {meaning}")

                return {
                    "english_word": data.english_word,
                    "target_language": data.target_language,
                    "translation": translation,
                    "meaning": meaning,
                    "examples": {
                        "example1": example1,
                        "example2": example2,
                        "example3": example3
                    }
                }

            @app.get("/")
            def index():
                return {
                    "message": "Language Translation and Learning API running", 
                    "health": "/health", 
                    "translate": "/translate",
                    "description": "Translate English words to any language with meanings and examples"
                }

            @app.get("/health")
            def health():
                return {"status": "ok"}

            if __name__ == "__main__":
                import uvicorn
                uvicorn.run(app, host="0.0.0.0", port=3000)
            EOL

            # Create requirements.txt (unchanged, as fastapi includes CORSMiddleware)
            cat > /home/ec2-user/requirements.txt << 'EOL'
            fastapi
            uvicorn
            requests
            pydantic
            python-dotenv
            urllib3<2
            EOL

            # Set ownership
            chown ec2-user:ec2-user /home/ec2-user/app.py
            chown ec2-user:ec2-user /home/ec2-user/requirements.txt

            # Install requirements and start app as ec2-user
            su - ec2-user -c "pip3 install -r /home/ec2-user/requirements.txt"
            su - ec2-user -c "cd /home/ec2-user && nohup uvicorn app:app --host 0.0.0.0 --port 3000 --log-level debug --reload > app.log 2>&1 &"
  
  BackendALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: backend-ALB
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
      - !Ref BackendALBSecurityGroup
      Tags:
      - Key: Name
        Value: backend-ALB

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: backend-TG
      VpcId: !Ref MyVPC
      Protocol: HTTP
      Port: 3000
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 3

  BackendALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref BackendALB
      Protocol: HTTP
      Port: 80
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref BackendTargetGroup

  BackendASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - BackendLaunchTemplate
    Properties:
      AutoScalingGroupName: backend-asg
      VPCZoneIdentifier:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: !GetAtt BackendLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 500
      TargetGroupARNs:
      - !Ref BackendTargetGroup
      Tags:
      - Key: Name
        Value: backend-asg
        PropagateAtLaunch: true

Outputs:
  VPCId:
    Description: "VPC ID"
    Value: !Ref MyVPC

  PublicSubnet1Id:
    Description: "Public Subnet 1 ID"
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: "Public Subnet 2 ID"
    Value: !Ref PublicSubnet2

  InternetGatewayId:
    Description: "Internet Gateway ID"
    Value: !Ref InternetGateway

  PrivateSubnet1Id:
    Description: "Private Subnet 1 ID"
    Value: !Ref PrivateSubnet1

  PrivateSubnet2Id:
    Description: "Private Subnet 2 ID"
    Value: !Ref PrivateSubnet2

  